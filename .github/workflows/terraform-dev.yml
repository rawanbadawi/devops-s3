name: "Terraform"
on:
  push:
    branches:
      - dev
  pull_request:
      branches:
        - dev

env:
  WORKLOAD_IDENTITY_PROVIDER: projects/504579259344/locations/global/workloadIdentityPools/github/providers/github-actions
  SERVICE_ACCOUNT: tsting@rbadawi-host-vpc.iam.gserviceaccount.com
  ENVIRONMENT: dev

jobs:
  terraform:
    if: (github.ref !== 'refs/heads/dev' ||github.ref !== 'refs/heads/prd' || github.ref !== 'refs/heads/stg' ) && (github.event_name == 'push' || github.event_name == 'pull_request' ) 
    name: "Terraform on Development Environment"
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          WORKLOAD_IDENTITY_PROVIDER: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          SERVICE_ACCOUNT: ${{ env.SERVICE_ACCOUNT }}
          access_token_lifetime: '3600s' # optional, default: '3600s' (1 hour)
      # Terraform steps

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.1
          cli_config_credentials_token: ${{ steps.auth.outputs.access_token }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config='environment/${{ env.ENVIRONMENT }}/backend.tfbackend' -reconfigure


      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color



      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |-
          terraform plan -var-file='environment/${{ env.ENVIRONMENT }}/terraform.tfvars' -var='environment=${{ env.ENVIRONMENT }}' -no-color

      - name: Attach plan to PR
        id: attach-plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
        run: terraform apply -var-file='environment/${{ env.ENVIRONMENT }}/terraform.tfvars' -var='environment=${{ env.ENVIRONMENT }}'  -auto-approve
